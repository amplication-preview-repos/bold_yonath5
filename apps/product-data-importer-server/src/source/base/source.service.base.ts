/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Source as PrismaSource } from "@prisma/client";

export class SourceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SourceCountArgs, "select">): Promise<number> {
    return this.prisma.source.count(args);
  }

  async sources<T extends Prisma.SourceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SourceFindManyArgs>
  ): Promise<PrismaSource[]> {
    return this.prisma.source.findMany<Prisma.SourceFindManyArgs>(args);
  }
  async source<T extends Prisma.SourceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SourceFindUniqueArgs>
  ): Promise<PrismaSource | null> {
    return this.prisma.source.findUnique(args);
  }
  async createSource<T extends Prisma.SourceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SourceCreateArgs>
  ): Promise<PrismaSource> {
    return this.prisma.source.create<T>(args);
  }
  async updateSource<T extends Prisma.SourceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SourceUpdateArgs>
  ): Promise<PrismaSource> {
    return this.prisma.source.update<T>(args);
  }
  async deleteSource<T extends Prisma.SourceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SourceDeleteArgs>
  ): Promise<PrismaSource> {
    return this.prisma.source.delete(args);
  }
}
