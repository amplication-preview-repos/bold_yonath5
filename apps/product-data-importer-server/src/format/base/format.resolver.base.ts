/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Format } from "./Format";
import { FormatCountArgs } from "./FormatCountArgs";
import { FormatFindManyArgs } from "./FormatFindManyArgs";
import { FormatFindUniqueArgs } from "./FormatFindUniqueArgs";
import { CreateFormatArgs } from "./CreateFormatArgs";
import { UpdateFormatArgs } from "./UpdateFormatArgs";
import { DeleteFormatArgs } from "./DeleteFormatArgs";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { FormatService } from "../format.service";
@graphql.Resolver(() => Format)
export class FormatResolverBase {
  constructor(protected readonly service: FormatService) {}

  async _formatsMeta(
    @graphql.Args() args: FormatCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Format])
  async formats(@graphql.Args() args: FormatFindManyArgs): Promise<Format[]> {
    return this.service.formats(args);
  }

  @graphql.Query(() => Format, { nullable: true })
  async format(
    @graphql.Args() args: FormatFindUniqueArgs
  ): Promise<Format | null> {
    const result = await this.service.format(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Format)
  async createFormat(@graphql.Args() args: CreateFormatArgs): Promise<Format> {
    return await this.service.createFormat({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Format)
  async updateFormat(
    @graphql.Args() args: UpdateFormatArgs
  ): Promise<Format | null> {
    try {
      return await this.service.updateFormat({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Format)
  async deleteFormat(
    @graphql.Args() args: DeleteFormatArgs
  ): Promise<Format | null> {
    try {
      return await this.service.deleteFormat(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Product], { name: "products" })
  async findProducts(
    @graphql.Parent() parent: Format,
    @graphql.Args() args: ProductFindManyArgs
  ): Promise<Product[]> {
    const results = await this.service.findProducts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
